a1==i1 true
b1==i1 true
a1==b1 false
a1.equals(i1) -> true
b1.equals(i1) -> true
a1.equals(b1) -> false
a2==i2 true
b2==i2 true
a2==b2 true
a2.equals(i2) -> true
b2.equals(i2) -> true
a2.equals(b2) -> true

a1 == i1 и b1 == i1:
Оба выражения вернут true, потому что a1 и b1 являются объектами Integer, которые были автоматически упакованы из int и сравниваются с int. В этом случае автоупаковка создает временные объекты, и при сравнении с примитивом int Java будет проводить автораспаковку.
a1 == b1:
Возвращает false, потому что при значении 128, класс Integer не использует кэширование. Объекты a1 и b1 будут различными экземплярами Integer, так как они созданы отдельно.
a1.equals(i1) и b1.equals(i1):
Оба выражения возвращают true, поскольку метод equals сравнивает значения, а не ссылки на объекты.
a1.equals(b1):
Возвращает false, потому что a1 и b1 — это разные объекты, созданные с различными значениями.
Для i2 (127):
Все сравнения вернут true, потому что значения 127 и ниже кэшируются в классе Integer. Таким образом, a2 и b2 будут ссылаться на один и тот же объект, и все сравнения по ссылкам будут истинными.

Класс IntegerCache используется для кэширования объектов Integer, чтобы избежать создания новых экземпляров для часто используемых значений. 
Значения от -128 до 127 кэшируются, чтобы сэкономить память и улучшить производительность. 
Поэтому при создании объектов Integer в этом диапазоне они будут ссылаться на один и тот же экземпляр, что позволяет использовать операторы == для сравнения.
